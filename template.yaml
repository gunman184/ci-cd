# This AWS SAM template has been generated from your function's configuration. If
# your function has one or more triggers, note that the AWS resources associated
# with these triggers aren't fully specified in this template and include
# placeholder values. Open this template in AWS Infrastructure Composer or your
# favorite IDE and modify it to specify a serverless application with other AWS
# resources.
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing your function.
Resources:
  #S3 Bucket deployment
  MyWebsite:
    Type: AWS::S3::Bucket
    Properties:
      #AccessControl: PublicRead
      WebsiteConfiguration: 
        IndexDocument: index.html
      BucketName: devopswithmarcel.org
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true                      
        IgnorePublicAcls: true
        BlockPublicPolicy: false              
        RestrictPublicBuckets: false

  #S3 Bucket Policy 
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref MyWebsite
                - "/*"
      Bucket: !Ref MyWebsite

###################

  #Hosted Zone not needed

  # DevOpsWithMarcelHostedZone:
  #   Type: AWS::Route53::HostedZone
  #   Properties:
  #     Name: devopswithmarcel1128.org

 

###################
  #Route 53 deployment with type A, with an existing hostedzone.
  # RootDomainRecord:
  #   Type: AWS::Route53::RecordSet
  #   DependsOn: DevOpsWithMarcelHostedZone
  #   Properties:
  #     HostedZoneName: devopswithmarcel.org.
  #     Name: devopswithmarcel.org.
  #     Type: A
  #     AliasTarget:
  #       DNSName: d2sohj8jycsthk.cloudfront.net
  #       HostedZoneId: Z2FDTNDATAQYW2 # S3 Website hosting zone ID for us-east-1


#####################


  # DevOpsWithMarcelCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   DependsOn: DevOpsWithMarcelHostedZone
  #   Properties:
  #     DomainName: devopswithmarcel1128.org
  #     SubjectAlternativeNames:
  #       - "*.devopswithmarcel1128.org"
  #     ValidationMethod: DNS
  #     DomainValidationOptions:
  #       - DomainName: devopswithmarcel1128.org
  #         HostedZoneId: !GetAtt DevOpsWithMarcelHostedZone.Id

  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: Z0657015HD2ARN4XSDD6
      RecordSets: 
        - Name: devopswithmarcel.org
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt MyCloudFrontDistribution.DomainName

  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: devopswithmarcel.org
      SubjectAlternativeNames:
        - "*.devopswithmarcel.org"
      ValidationMethod: DNS

  #CloudFront Distribution deployment to S3 bucket: devsopswithmarcel.org
  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: devopswithmarcel.org.s3-website-us-east-1.amazonaws.com #my-fantastic-website1128.s3-website-us-east-1.amazonaws.com
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ForwardedValues:
              QueryString: false
        Origins:
        - DomainName: devopswithmarcel.org.s3-website-us-east-1.amazonaws.com
          Id: devopswithmarcel.org.s3-website-us-east-1.amazonaws.com
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        Enabled: "true"
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref MyCertificate
          SslSupportMethod: sni-only
        Aliases:
          - www.devopswithmarcel.org
          - devopswithmarcel.org
        
        




 
  # MyCloudFrontDistribution:
  #   Type: AWS::CloudFront::Distribution
  #   DependsOn: MyWebsite
  #   Properties: 
  #     DistributionConfig:
  #       Enabled: true
  #       Aliases:
  #         - www.devopswithmarcel1128.org
  #         - devopswithmarcel1128.org
  #       DefaultRootObject: index.html
  #       Origins:
  #         - Id: WebsiteOrigin
  #           DomainName: my-fantastic-website1128.s3-website-us-east-1.amazonaws.com
  #           CustomOriginConfig:
  #             HTTPPort: 80
  #             HTTPSPort: 443
  #             OriginProtocolPolicy: http-only
  #       DefaultCacheBehavior:
  #         TargetOriginId: my-fantastic-website1128.s3-website-us-east-1.amazonaws.com
  #         ViewerProtocolPolicy: redirect-to-https
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #         CachedMethods:
  #           - GET
  #           - HEAD
  #         ForwardedValues:
  #           QueryString: false
  #           Cookies:
  #             Forward: none

  WebsiteVisitsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WebsiteVisits
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

##############
  # VisitsCountAPI:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     Name: VisitsCountAPI
  #     StageName: production
  #     Cors: "'*'"  # Optional: allows CORS for testing
  #     DefinitionBody:
  #       openapi: 3.0.1
  #       info:
  #         title: VisitsCountAPI
  #         version: '1.0'
  #       paths:
  #         /api_processing:
  #           get:
  #             x-amazon-apigateway-integration:
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiprocessing.Arn}/invocations
  #               httpMethod: POST
  #               type: aws_proxy
  #           post:
  #             x-amazon-apigateway-integration:
  #               uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiprocessing.Arn}/invocations
  #               httpMethod: POST
  #               type: aws_proxy

  VisitsCountAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: VisitsCountAPI
      StageName: prod
      Cors: # CORS config (important for OPTIONS)
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "VisitsCountAPI"
          version: "1.0"
        paths:
          /api_processing:
            get:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiprocessing.Arn}/invocations
                httpMethod: POST # YES, for Lambda Proxy, APIGateway uses POST always internally!
                type: aws_proxy
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiprocessing.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              responses:
                "200":
                  description: "200 response for CORS"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"


##############
  apiprocessing:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: api_processing
      CodeUri: ./api-app
      Description: ''
      MemorySize: 128
      Timeout: 3
      Handler: app.lambda_handler
      Runtime: python3.9
      Events: 
         ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref VisitsCountAPI
            Path: /api_processing
            Method: ANY
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - apigateway:*
              Resource: arn:aws:apigateway:*::/*
            - Effect: Allow
              Action:
                - autoscaling:Describe*
                - cloudwatch:*
                - logs:*
                - sns:*
                - iam:GetPolicy
                - iam:GetPolicyVersion
                - iam:GetRole
                - oam:ListSinks
              Resource: '*'
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource: >-
                arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*
              Condition:
                StringLike:
                  iam:AWSServiceName: events.amazonaws.com
            - Effect: Allow
              Action:
                - oam:ListAttachedLinks
              Resource: arn:aws:oam:*:*:sink/*
            - Action:
                - dynamodb:*
                - dax:*
                - application-autoscaling:DeleteScalingPolicy
                - application-autoscaling:DeregisterScalableTarget
                - application-autoscaling:DescribeScalableTargets
                - application-autoscaling:DescribeScalingActivities
                - application-autoscaling:DescribeScalingPolicies
                - application-autoscaling:PutScalingPolicy
                - application-autoscaling:RegisterScalableTarget
                - cloudwatch:DeleteAlarms
                - cloudwatch:DescribeAlarmHistory
                - cloudwatch:DescribeAlarms
                - cloudwatch:DescribeAlarmsForMetric
                - cloudwatch:GetMetricStatistics
                - cloudwatch:ListMetrics
                - cloudwatch:PutMetricAlarm
                - cloudwatch:GetMetricData
                - datapipeline:ActivatePipeline
                - datapipeline:CreatePipeline
                - datapipeline:DeletePipeline
                - datapipeline:DescribeObjects
                - datapipeline:DescribePipelines
                - datapipeline:GetPipelineDefinition
                - datapipeline:ListPipelines
                - datapipeline:PutPipelineDefinition
                - datapipeline:QueryObjects
                - ec2:DescribeVpcs
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
                - iam:GetRole
                - iam:ListRoles
                - kms:DescribeKey
                - kms:ListAliases
                - sns:CreateTopic
                - sns:DeleteTopic
                - sns:ListSubscriptions
                - sns:ListSubscriptionsByTopic
                - sns:ListTopics
                - sns:Subscribe
                - sns:Unsubscribe
                - sns:SetTopicAttributes
                - lambda:CreateFunction
                - lambda:ListFunctions
                - lambda:ListEventSourceMappings
                - lambda:CreateEventSourceMapping
                - lambda:DeleteEventSourceMapping
                - lambda:GetFunctionConfiguration
                - lambda:DeleteFunction
                - resource-groups:ListGroups
                - resource-groups:ListGroupResources
                - resource-groups:GetGroup
                - resource-groups:GetGroupQuery
                - resource-groups:DeleteGroup
                - resource-groups:CreateGroup
                - tag:GetResources
                - kinesis:ListStreams
                - kinesis:DescribeStream
                - kinesis:DescribeStreamSummary
              Effect: Allow
              Resource: '*'
            - Action:
                - cloudwatch:GetInsightRuleReport
              Effect: Allow
              Resource: arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*
            - Action:
                - iam:PassRole
              Effect: Allow
              Resource: '*'
              Condition:
                StringLike:
                  iam:PassedToService:
                    - application-autoscaling.amazonaws.com
                    - application-autoscaling.amazonaws.com.cn
                    - dax.amazonaws.com
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:AWSServiceName:
                    - replication.dynamodb.amazonaws.com
                    - dax.amazonaws.com
                    - dynamodb.application-autoscaling.amazonaws.com
                    - contributorinsights.dynamodb.amazonaws.com
                    - kinesisreplication.dynamodb.amazonaws.com
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:us-east-1:956979606162:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - >-
                  arn:aws:logs:us-east-1:956979606162:log-group:/aws/lambda/api_processing:*
      RecursiveLoop: Terminate
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
